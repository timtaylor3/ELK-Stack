filter {

   if "cas" in [tags] {

      # Clean up JSON before processing the line
      mutate { gsub => [ "message", "\"{", "{" ] } 
      mutate { gsub => [ "message", "}\"", "}" ] }
      mutate { gsub => [ "message", '""', '"' ] } 

      grok { 
         patterns_dir => ["/usr/local/elk/grok-patterns"]    
         match => [ "message", "%{TIMESTAMP_ISO8601:CreationDate},%{EMAILADDRESS:UserID},%{WORD:Action},%{GREEDYDATA:j_data}" ]
         tag_on_failure => ["f_cas_grok"]
      }

     json {
        source => "j_data"
        tag_on_failure => ["f_json_mapping"]
        id => "cas_json"
     }

     if [ExtendedProperties] {
        ruby {
            code => "event.get('[ExtendedProperties]').each {|hash| event.set(hash['Name'], hash['Value']) }"
            tag_on_exception => "f_cas_ruby"
        }
     }

     #json {
     #   source => "ExtendedProperties"
     #   target => "ExtendedProperties"
     #   tag_on_failure => ["f_json_ep_mapping"]
     #}

     #json {
     #   source => "Target"
     #   target => "Target"
     #   tag_on_failure => ["f_json_target_mapping"]
     #}

      date {
         match => ["CreationTime", "ISO8601"]
         target => ["@timestamp"]
         tag_on_failure => ["f_timestamp_mapping"]
      }
        
      mutate { remove_field => [ "j_data" ] }
      mutate { remove_field => [ "message" ] }
   }
}
