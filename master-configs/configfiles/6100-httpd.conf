# SOF-ELK Configuration File
# (C)2016 Lewes Technology Consulting, LLC
#
# This file contains filters, transforms, and enrichments for HTTPD access log messages
# Modified: the directory location of the grok-patterns by Tim Taylor - June 27, 2017
# Added: NGNIX pattern matching by Tim Taylor -> Not validated
# Updates by Tim Taylor
# Updated logic to use tags since type was no longer determined by configuration. 


filter {

  if "httpdlog" in [tags] {
    # this should only occur with syslog-based source records
    if [logsource] {
      mutate {
        add_field => { "path" => "HTTPD log from %{logsource}" }
        # the syslog handler populates this with the syslog-based date. we don't want that, though - we'll replace with the date parsed from the http log entry below
        remove_field => [ "timestamp" ]
      }
    } else if "filebeat" in [tags] {
      mutate {
        add_field => { "path" => "filebeat: %{host}:%{source}" }
      }
    } else {
      mutate {
        add_field => { "path" => "unknown source" }
      }
    }

    grok {
      patterns_dir => "/usr/local/elk/grok-patterns"

      # syslog-based entries, as used on my own servers (HTTP access log pushed via syslog messages)
      match => [ "message", "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMBINEDAPACHELOG}" ]
      match => [ "message", "%{SYSLOGTIMESTAMP} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{COMMONAPACHELOG}" ]

      # live syslog-based data, partially parsed via the syslog{} input selector
      match => [ "message", "%{HOSTNAME:hostname} %{COMBINEDAPACHELOG}" ]
      match => [ "message", "%{HOSTNAME:hostname} %{COMMONAPACHELOG}" ]

      # straight-out NCSA combined/common formats.  combined has to go first, since common will match a combined entry as well - and we break on first match

      match => [ "message", "%{COMBINEDAPACHELOG}" ]
      match => [ "message", "%{COMMONAPACHELOG}" ]
      
      # ssl_access_log format
      match => [ "message", "\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip} %{WORD:ssl_proto} %{NOTSPACE:ssl_cipher} \"(?:%{WORD:request_method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" (?:%{NUMBER:destination_bytes}|-)"]

      # IIS Logs, with help from http://logz.io/blog/iis-log-analyzer/
      # 2015-12-08 06:41:42 GET /handler/someservice.ashx someData=foobar 80 10.223.22.122 HTTP/1.1 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/46.0.2490.86+Safari/537.36 1.2.1005047168.1446986881 http://www.logz.io/testing.aspx www.logz.io 200 638 795 0
      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{IPORHOST:source_ip} HTTP/%{NUMBER:httpversion} %{NOTSPACE:agent} %{NOTSPACE:cookie} %{NOTSPACE:referrer} %{NOTSPACE:hostname} %{NUMBER:response_code} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time}" ]

      # 2002-05-24 20:18:01 172.224.24.114 - 206.73.118.24 80 GET /Default.htm - 200 7930 248 31 Mozilla/4.0+(compatible;+MSIE+5.01;+Windows+2000+Server) http://64.224.24.114/
      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:source_ip} %{USER:ident} %{IPORHOST:destination_ip} %{NUMBER:destination_port} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:response_code} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time} %{NOTSPACE:agent} %{NOTSPACE:referrer}" ]

      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{IPORHOST:destination_ip} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{USER:ident} %{IPORHOST:source_ip} %{NOTSPACE:agent} %{NOTSPACE:referrer} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:response_time}" ]

      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:hostname} %{WORD:request_method} %{URIPATH:request} %{NOTSPACE:query_string} %{NUMBER:destination_port} %{USER:ident} %{IPORHOST:source_ip} %{NOTSPACE:agent} %{NOTSPACE:cookie} %{NOTSPACE:referrer} %{NOTSPACE:hostname} %{NUMBER:response_code} %{NUMBER:response_sub} %{NUMBER:win_status} %{NUMBER:destination_bytes} %{NUMBER:source_bytes} %{NUMBER:response_time}" ]

      add_tag => [ "parse_done" ]
      tag_on_failure => [ "_gpfail", "fail_ht01" ]
    }

    # if nothing above matched, we might have a corrupt or partial record.  let's try to squeak out whatever fields we can
    if !( "parse_done" in [tags]) {
      grok {
        patterns_dir => "/usr/local/elk/grok-patterns"
        # match first few fields from the syslog-based format
        match => [ "message", "%{SYSLOGTIMESTAMP} %{SYSLOGHOST} %{SYSLOGPROG}: %{HOSTNAME:hostname} %{IPORHOST:source_ip} %{USER:ident} %{NOTSPACE:username} \[%{HTTPDATE:timestamp}\]" ]
        # client IP address is first entry in NCSA combined/common formats
        match => [ "message", "^%{IPORHOST:source_ip} %{USER:ident} %{NOTSPACE:username} \[%{HTTPDATE:timestamp}\]" ]
        # first few fields from ssl_access_log format
        match => [ "message", "^\[%{HTTPDATE:timestamp}\] %{IPORHOST:source_ip}" ]
        # find ANY httplog-formatted date string
        match => [ "message", "\[%{HTTPDATE:timestamp}\]" ]

        add_tag => [ "partial_httpd_log", "parse_done" ]
        tag_on_failure => [ "_gpfail", "fail_ht02" ]
      }
    }  
 
   if "[timestamp]" {
      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        remove_field => [ "timestamp" ]
      }
    }

    if [referrer] {
      mutate {
        # remove quotes from quoted string
        gsub => [
          "referrer", "\"", ""
        ]
      }
    }
    if [agent] {
      mutate {
        # remove quotes from quoted string
        # convert + sign to space
        gsub => [
          "agent", "\"", "",
          "agent", "\+", " "
        ]
      }
    }

    if [program] {
      mutate {
        remove_field => [ "program" ]
      }
    }

    if "parse_done" in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
    }
  }
}
